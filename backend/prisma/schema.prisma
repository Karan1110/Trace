generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channels {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(255)
  type      channels_type @default(text)
  chat_id   Int
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  chat      Chats         @relation(fields: [chat_id], references: [id], onDelete: NoAction)
  messages  Messages[]
}

model ChatUser {
  chat_id   Int
  user_id   Int
  user      Users     @relation(fields: [user_id], references: [id])
  chat      Chats     @relation(fields: [chat_id], references: [id])
  role      chat_role @default(user)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@id([user_id, chat_id])
}

model Chats {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  type       chats_type? @default(group)
  inviteCode String?     @db.Uuid
  url        String?     @default("https://static.vecteezy.com/system/resources/previews/006/892/625/original/discord-logo-icon-editorial-free-vector.jpg") @db.VarChar(255)
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  channels   Channels[]
  users      ChatUser[]

  @@unique([inviteCode])
  @@index([id])
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String?
  user_id   Int?
  ticket_id Int?
  likes     String[] @default([])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  ticket    Tickets? @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user      Users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Departments {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  url       String?    @db.VarChar(255)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  tickets   Tickets[]
  users     Users[]

  @@index([id])
}

model FollowUsers {
  id           Int      @id @default(autoincrement())
  following_id Int?
  user_id      Int?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user         Users?   @relation("user", fields: [user_id], references: [id], onDelete: Cascade)
  following    Users?   @relation("following", fields: [following_id], references: [id], onDelete: Cascade)

  @@index([user_id, following_id])
}



model Messages {
  id         String   @id @db.VarChar(255)
  value      String   @db.VarChar(255)
  url        String?  @db.VarChar(255)
  createdAt  DateTime @db.Timestamptz(6) @default(now())
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  channel_id Int
  user_id    Int
  channel    Channels @relation(fields: [channel_id], references: [id], onDelete: NoAction)
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  deleted    Boolean? @default(false)
}

model Notifications {
  id        Int      @id @default(autoincrement())
  message   String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user_id   Int?
  user      Users?   @relation("notifications", fields: [user_id], references: [id], onDelete: Cascade)
}

model Saveds {
  id        Int      @id @default(autoincrement())
  user_id   Int?
  ticket_id Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  ticket    Tickets? @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user      Users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Tickets {
  id                         Int             @id @default(autoincrement())
  name                       String?         @db.VarChar(255)
  deadline                   DateTime?       @db.Timestamptz(6)
  status                     tickets_status? @default(open)
  description                String?
  user_id                    Int?
  videoUrl                   String?
  comments                   Comments[]
  department_id              Int
  closedOn                   DateTime?       @db.Timestamptz(6)
  before_id                  Int?
  imageUrl                   String?
  createdAt                  DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  beforeTicket               Tickets?        @relation("beforeTicket", fields: [before_id], references: [id], onDelete: Cascade)
  user                       Users?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  department                 Departments?    @relation(fields: [department_id], references: [id])
  saveds                     Saveds[]
  afterTickets               Tickets[]       @relation("beforeTicket")
  timeTakenToCompleteInHours Int?
  meeting_link               String?

  @@index([status, name, description, user_id, createdAt])
}

model Users {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  email         String?         @unique @db.VarChar(255)
  password      String?         @db.VarChar(255)
  department_id Int? 
  blockedUsers  Int[]           @default([])
  followedUsers Int[]           @default([])
  points        Int?            @default(0)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  following     FollowUsers[]   @relation("user")
  followers     FollowUsers[]   @relation("following")
  messages      Messages[]
  notifications Notifications[] @relation("notifications")
  saveds        Saveds[]
  tickets       Tickets[]
  department    Departments?    @relation(fields: [department_id], references: [id], onDelete: Cascade)
  chats         ChatUser[]
  comments      Comments[]

  @@index([name, email, department_id])
}

enum channels_type {
  audio
  video
  text
}

enum chat_role {
  user
  moderator
  owner
}

enum chats_type {
  channel
  group
  personal
}

enum tickets_status {
  in_progress  
  closed
  open
}
